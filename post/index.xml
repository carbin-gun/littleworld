<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Little World</title>
    <link>http://littleworld.me/post/</link>
    <description>Recent content in Posts on Little World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jul 2016 20:54:41 +0800</lastBuildDate>
    <atom:link href="http://littleworld.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>excel export by poi</title>
      <link>http://littleworld.me/2016/07/31/excel-export-by-poi</link>
      <pubDate>Sun, 31 Jul 2016 20:54:41 +0800</pubDate>
      
      <guid>http://littleworld.me/2016/07/31/excel-export-by-poi</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s a online optimization for Excel export which might be a common demand, I will demonstrate the resolve thoughts , concrete problems , abstraction and the final result in this post.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Recently,I&amp;rsquo;ve been accepted a task from my boss about the excel export from our sites. The problem is summarized into two major problems as followed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The download is slow.&lt;/li&gt;
&lt;li&gt;Sometimes it will cause the JVM to crash.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;process&#34;&gt;Process&lt;/h2&gt;

&lt;p&gt;After digging into the code ,I&amp;rsquo;ve found we used the &lt;code&gt;poi&lt;/code&gt; lib from &lt;code&gt;Apache&lt;/code&gt;, and there were some serious issues where were confronted with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPA query,As for the high-level abstracted ORM tools,that may be a common problem ,the domain-driven code for database query.which may result in too many database queries.bingo, that&amp;rsquo;s where we were.&lt;/li&gt;
&lt;li&gt;we used &lt;code&gt;XSSFWorkbook&lt;/code&gt; class to create the Excel sheet,which carried all the objects in memory that will cause &lt;code&gt;OOM&lt;/code&gt; when the excel is too large.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;concrete-problems&#34;&gt;Concrete Problems&lt;/h2&gt;

&lt;h3 id=&#34;sql&#34;&gt;SQL&lt;/h3&gt;

&lt;p&gt;As for JPA ,it is a wrapper of Hibernate which do generate all the SQL behind,you can reduce your focus on the business domain and logic.but sometimes it will not be a good choice to use it in a simple way.
for example,if there&amp;rsquo;s a table(table &lt;code&gt;A&lt;/code&gt;) in the database ,and a column as another table&amp;rsquo;s id(table &lt;code&gt;B&lt;/code&gt;). at the same time, you abstract the two into an Entity and a field. which can be expressed as followed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; class B{
    private A xxx
 }
 class A{
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in this way, the JPA will do the query sent from B as a sequence of :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 1. query from table B ,filter all the rows by relevant conditions.
 2. query from table A by id ,from the above queries result.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for queries like this,small amount of query ,it will be acceptable.But when the queried rows from the 1st query reaches some quantity,the interaction between the application server and the database will cause performance problems.&lt;/p&gt;

&lt;h3 id=&#34;poi&#34;&gt;POI&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;POI&lt;/code&gt; is a mature lib from Apache. but for different demand ,there can be different implementations for excel generation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HSSF , for the Excel &amp;lsquo;97(-2007) file format.&lt;/li&gt;
&lt;li&gt;XSSF,  for the Excel 2007 OOXML (.xlsx) file format ,which uses XML as the underground implementation as the excel archive.&lt;/li&gt;
&lt;li&gt;SXSSF, compatible with the XSSF,but SXSSF achieves its low memory footprint by limiting access to the rows that are within a sliding window, while XSSF gives access to all rows in the document. Older rows that are no longer in the window become inaccessible, as they are written to the disk.
apparently ,from the display above,we can draw a safe conclusion: ** we should use SXSSF **, because we didn&amp;rsquo;t know how much rows it will be generated by limited queries,we must limit the memory access for safety.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resolve&#34;&gt;Resolve&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Replace all the ORM query with &lt;code&gt;native sql&lt;/code&gt; to accelerate the SQL query speed.which may not be that handy for ORM mapping tool.but as for speed, it is an overwhelming winner for &lt;code&gt;SQL&lt;/code&gt; to ORM.&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;SXSSWorkbook&lt;/code&gt; as an replacement for &lt;code&gt;XSSFWorkbook&lt;/code&gt; which will reduce the memory footprint dramatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;further-more&#34;&gt;Further More&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Isolate the excel server with other servers.As is known ,The excel process will generate a large amount of temp objects,which will affect the online performance that will result in latency of other online request. so Isolation is a good choice. Which can be down in some ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configure universal URI for excels,then you can configure the PROXY at the NGINX layer to specified machines.&lt;/li&gt;
&lt;li&gt;configure a sub-domain,then as for the URL,you can write as &lt;code&gt;//subdomain/xxx&lt;/code&gt;(don&amp;rsquo;t touch the protocol,the browser will adapt it no matter it is http or https),you just modify the domain of the request URL. and configure the subdomain proxy at the NGINX.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;configure the Database query to a slave database instead of the master one, because the query may bring some pressure to the database that may cause the sync latency rising between master database and the slave ones and of course the performance problems which will affect other database operations.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;a little improvement by object sharing. for our export,there will be many Date object .I do some object sharing in the request by a &lt;code&gt;HashMap&lt;/code&gt;,I can get a formatted Date String by a &lt;code&gt;Get&lt;/code&gt; but not a &lt;code&gt;FastDateFormat&lt;/code&gt; which will be much faster and reduce the memory footprint.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;

&lt;p&gt;The Excel can be generated and exported into client in a short period. And with the isolation with other online servers,we can ignore the impact by the excel-export to our online business and the latency.&lt;/p&gt;

&lt;h2 id=&#34;tips&#34;&gt;Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t forget to invoke poi&amp;rsquo;s &lt;code&gt;dispose&lt;/code&gt; after the whole process. Otherwise,there will be a lot of temp files on your server.&lt;/li&gt;
&lt;li&gt;Prepare the excel header row in advance which is better for speed.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RabbitMQ</title>
      <link>http://littleworld.me/2016/07/24/rabbitmq</link>
      <pubDate>Sun, 24 Jul 2016 14:20:41 +0800</pubDate>
      
      <guid>http://littleworld.me/2016/07/24/rabbitmq</guid>
      <description>

&lt;p&gt;Introduction and notes about the &lt;code&gt;AMQP&lt;/code&gt; product:RabbitMQ, which is a widely used messaging-queue product,Here I will show some concepts about it on this post.&lt;/p&gt;

&lt;h3 id=&#34;enable-web-interface-management&#34;&gt;enable web interface management&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;messaging-model&#34;&gt;Messaging Model.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  //Simplify the Model
  - A producer is a user application that sends messages.
  - A queue is a buffer that stores messages.
  - A consumer is a user application that receives messages.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Actually,The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue. Actually, quite often the producer doesn&amp;rsquo;t even know if a message will be delivered to any queue at all.Instead, the producer can only send messages to an exchange. An exchange is a very simple thing. On one side it receives messages from producers and the other side it pushes them to queues. The exchange must know exactly what to do with a message it receives. Should it be appended to a particular queue? Should it be appended to many queues? Or should it get discarded. The rules for that are defined by the exchange type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default exchange named &lt;code&gt;amq.direct&lt;/code&gt; is &lt;code&gt;direct&lt;/code&gt; type exchange, default exchange is very useful,because every queue that is created is automatically bound to it with a routing key which is the same as the queue name.So when we don&amp;rsquo;t declare a exchange,it will work well . the default direct exchange is ideal for the &lt;code&gt;unicast&lt;/code&gt; routing of messages.Direct exchanges are often used to distribute tasks between multiple workers in a &lt;code&gt;round-robin&lt;/code&gt; manner. When doing so, it is important to understand that, in AMQP 0-9-1, &lt;strong&gt;messages are load balanced between consumers and not between queues.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exchange-types&#34;&gt;Exchange Types&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- direct,it can dispatch queues,the exchange will dispatch messages according to the `routing_key` matching,when a exchange is declared,a `routing_key` was defined,after queue binding,the `routing` between queues and exchange was established, when a message goes to the exchange,if the `routing_key` of a message matches the `routing_key` of the exchange,it will be dispatched to the queue,which declares the `routing_key` when it established the binding.

- topic,compared to `direct` type ,`topic` can route based on multiple criteria.

- headers, routing on message headers instead of `routing_key`, Headers exchanges ignore the routing key attribute.

- fanout, it just broadcasts all the messages it receives to all the queues it knows. It ignores that `routing_key` setting on the exchange setting,It just do **mindless broadcasting**.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;message-publish&#34;&gt;Message Publish&lt;/h3&gt;

&lt;p&gt;when we do simple messaging things,we don&amp;rsquo;t need to specify the exchange,instead we use an empty string to denote  default or nameless exchange: messages are routed to the queue with the name specified by routing_key, if it exists.&lt;/p&gt;

&lt;p&gt;the exchanges existed can be queried by command like : &lt;code&gt;rabbitmqctl list_exchanges&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;bindings&#34;&gt;Bindings&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;tell the exchange to send messages to our queue. That relationship between exchange and a queue is called a binding.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rabbitmqctl list_bindings&lt;/code&gt; to list existing Bindings on the RabbitMQ server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;durablity&#34;&gt;Durablity&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;queue of rabbitMQ was set durable,but after the RabbitMQ broker was restarted,the queue was empty.Because at the same time  you should set the property called  &lt;code&gt;DeliveryMode&lt;/code&gt; of the message to be &lt;code&gt;persistent&lt;/code&gt; too.
&lt;code&gt;DeliveryMode&lt;/code&gt; can be set as two values:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; represents &lt;code&gt;transient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt; represents &lt;code&gt;persistent&lt;/code&gt;,with that value the item will be persisted into disk storage instantly when the broker receives the publishing.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fair-dispatch&#34;&gt;Fair dispatch.&lt;/h3&gt;

&lt;p&gt;RabbitMQ just dispatches a message when the message enters the queue. It doesn&amp;rsquo;t look at the number of unacknowledged messages for a consumer. It just blindly dispatches every nth message to the nth consumer.In this context,sometimes, that we push messages evenly to every worker is not properly right.we could dispatch by each worker&amp;rsquo;s capacity,  we can use the &lt;code&gt;basic.qos&lt;/code&gt; method with the &lt;code&gt;prefetch_count=${number}&lt;/code&gt; setting. This tells RabbitMQ not to give more than one message to a worker at a time. Or, in other words, don&amp;rsquo;t dispatch a new message to a worker until it has processed and acknowledged the previous one. Instead, it will dispatch it to the next worker that is not still busy.(In a real world.the prefetch_count might be not only one for efficiency,but might not too much either).&lt;/p&gt;

&lt;h3 id=&#34;message-removal&#34;&gt;Message Removal&lt;/h3&gt;

&lt;p&gt;RabbitMQ will remove the messages from memory and queue of course,but if the  consumer dies (its channel is closed, connection is closed, or TCP connection is lost),we will lose all the messages that were dispatched to this particular worker but were not yet handled.
  we should not remove the message from RabbitMQ broker immediately after delivery success to the consumer. Instead the mechanism should be like this:
    1. the messages delivered to consumer,do not remove immediately but wait.
    2. the consumer do all the processing and do ACK to the RabbitMQ broker.
    3. If an ACK was received from the broker ,the message can be removed from broker now.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.rabbitmq.com/tutorials/amqp-concepts.html&#34;&gt;RabbitMQ concepts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>